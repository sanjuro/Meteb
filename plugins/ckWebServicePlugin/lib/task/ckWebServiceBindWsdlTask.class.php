<?php
/**
 * This file is part of the ckWebServicePlugin
 *
 * @package   ckWebServicePlugin
 * @author    Christian Kerl <christian-kerl@web.de>
 * @copyright Copyright (c) 2010, Christian Kerl
 * @license   http://www.opensource.org/licenses/mit-license.php MIT License
 * @version   SVN: $Id: ckWebServiceBindWsdlTask.class.php 29916 2010-06-20 16:02:55Z chrisk $
 */

/**
 * ckWebServiceBindWsdlTask binds a wsdl file generated by ckWebServiceGenerateWsdlTask to an endpoint
 * location using ckWsdlEndpointLocationBinder.
 *
 * @package    ckWebServicePlugin
 * @subpackage task
 * @author     Christian Kerl <christian-kerl@web.de>
 */
class ckWebServiceBindWsdlTask extends sfBaseTask
{
  /**
   * @see sfTask
   */
  protected function configure()
  {
    $this->namespace        = 'webservice';
    $this->name             = 'bind-wsdl';
    $this->briefDescription = 'Binds a wsdl file generated by webservice:generate-wsdl task to an endpoint location';
    $this->detailedDescription = <<<EOF
The [webservice:bind-wsdl|INFO] task binds a wsdl file generated by webservice:generate-wsdl task to an endpoint location.
Call it with:

  [./symfony webservice:bind-wsdl|INFO]

The bound wsdl file will be copied to the [web/|COMMENT] directory:

  [web/%name%.wsdl|INFO]

EOF;

    $this->addArgument('name', sfCommandArgument::REQUIRED, 'The webservice name');
    $this->addArgument('url', sfCommandArgument::REQUIRED, 'The endpoint url');
  }

  /**
   * @see sfTask
   */
  protected function execute($arguments = array(), $options = array())
  {
    $service  = $arguments['name'];
    $endpoint = $arguments['url'];

    $wsdl = $this->getWsdlFile($service);

    if(!$wsdl)
    {
      $this->logBlock(sprintf('Missing wsdl file for service %s!', $service), 'ERROR');
      return;
    }

    $binder = new ckWsdlEndpointLocationBinder($wsdl);
    $binder->bind($endpoint);

    $this->buildWsdlFile($binder, $service);
  }

  private function getWsdlFile($service)
  {
    $file = sprintf('%s/wsdl/%s.wsdl', sfConfig::get('sf_data_dir'), $service);

    return file_exists($file) ? $file : false;
  }

  private function buildWsdlFile(ckWsdlEndpointLocationBinder $binder, $service)
  {
    $wsdl_file = sprintf('%s/%s.wsdl', sfConfig::get('sf_web_dir'), $service);

    file_put_contents($wsdl_file, $binder->getXml());
    $this->logSection('file+', $wsdl_file);
  }
}